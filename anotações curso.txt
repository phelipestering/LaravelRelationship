ERROS

SQLSTATE[HY000] [1045] Access denied - e possivel erro de conexao no mysql workbench

Pass

sail down --rmi all -v | fora do containe, remover os container e versoes




***********************************************************************************************************


AULA: 05 - LARAVEL RELACIONAMENTO ONE TO ONE

http://localhost/one-to-one

1 dado pertentencente a 1 registro

Criando factories

Comandos:

1- php artisan Tinker

2- < path do model>::factory()->count(numero de registros)->create();

    \App\Models\User::factory()->count(10)->create();


Importando varios models na rota:

    use App\Models\{
    User,
    Preference
};

RETORNANDO O PRIMEIRO USUARIO POR "FIRST"

Route::get('/one-to-one', function () {
    //$user = User::first(); -> pegando referencia pelo primeiro registros

    $user = User::with('preference')->find(2); - encontrando o registro

    $data = [
        'background_color' => '#987'
    ]; - armarzenando preferencia na variavel $data

    if($user->preferences){
        $user->preferences->update($data);
    } else {
        //$user->preferences()->create($data);

        $preference = new Preference ($data);
        $user->preference()->save ($preference);
    }

    $user->refresh();

    var_dump($user->preference);

    $user->preference->delete();

    $user->refresh();

    dd($user->preference);
});



AULA: 06 - LARAVEL RELACIONAMENTO ONE TO MANY (E INVERSO)

Relacionamento 1 para muitos

Models + Migrations

php artisan make:model Curso -m

php artisan make:model Modulo -m

php artisan make:model Aula -m

CRIANDO O RELACIONAMENTO 1 PRA MUITOS NO MODELS

no exemplo, 1 curso tem varios modulos.

entao em curso, criamos um relacionamento hasmany para modulos.

model cursos:

public function modulos()
    {
        return $this -> hasMany(Modulo::class);
    }

Os mudulos pertencem a 1 curso, entao no model curso criado relacionamento 1 para 1 em Modulos

abaixo informando que o modulo, pertence a 1 curso

## model Modulos: ##

definindo o relacionamento, temos o seguinte:

** o Modulo se pertence a 01 curso

public function curso()
    {
        return $this -> belongsTo(Curso::class);
    }

** O Modulo tem varias aulas

    public function aulas()
    {
        return $this -> hasMany(Aula::class);
    }

## model Curso: ##

definindo o relacionamento, temos o seguinte:

** o Curso tem varios modulos

public function modulos()
    {
        return $this -> hasMany(Modulo::class);
    }

## model Aula: ##

definindo o relacionamento, temos o seguinte:

** a Aula pertence a uma modulo

public function modulo()
    {
        return $this -> belongsTo(Modulo::class);
    }


comentando o codigo...

Route::get('/one-to-many', function () {
    //$curso = Curso::create(['nome'=> 'Curso Relacionamento tabelas']); - criando curso com o nome

    $curso = Curso::with('modulos.aulas')->first(); -> fazendo a consulta do banco de dados usando o atributo "with" para que
    a consulta seja melhor indexada

    echo $curso->nome; -> imprimindo o nome do curso
    echo '<br>';
    foreach ($curso->modulos as $modulo){ -> capturando o curso, veha que foi definido a consulta com o first,
    assim veio o primeiro curso
        echo "Modulo{$modulo->nome} <br>"; - imprimiu o nome do modulo

        foreach ($modulo->aulas as $aula){
            echo "aula {$aula->nome} <br>";
        }


        dd($curso);
    }
});


AULA: 07 - LARAVEL RELACIONAMENTOS MANY TO MANY

Situacao: cada usuario tem varias permissoes e uma permissao possui um usuario.

sendo o relacionamento:

criados as tabelas pivo em permissoes criadas na migratiom "permissions"

public function up()
    {
        Schema::create('permissions', function (Blueprint $table) { -> criacao de tabelas
            $table->id();
            $table->string('name')->unique(); - nomeando name como campo unico
            $table->timestamps();
        });

        Schema::create('permission_user', function (Blueprint $table) {
            $table->id();
            $table->foreignId('permission_id')->constrained('permissions'); ## chave estrangeira ligando comunicando com o pemission ID
            $table->foreignId('user_id')->constrained('users');
            $table->boolean('active')->default(true);
            $table->timestamps();
        });
    }

public function down() ## metodo para deletar as tabelas
    {
        Schema::dropIfExists('permissions_user');
        Schema::dropIfExists('permissions');
    }

## note acima que, a estrutura de delete tem que ser respeitada, sendo que primeiro deleta-se a tabela mais ˜fraca˜
e na sequencia a tabela mais forte.

RELACIONAMENTOS NOS Models


NA MODEL PERMISSIONS....

public function users ()
    {
        return $this-> belongsToMany(User::class);
    }

NA MODEL USERS....

public function permissions ()
    {
        return $this-> belongsToMany(Permission::class);
    }


Teste nas rotas

Route::get('/many-to-many', function () {

    dd(Permission::create (['name'=>'menu 02']));

});


relacionamento 1 permissao com um usuario




